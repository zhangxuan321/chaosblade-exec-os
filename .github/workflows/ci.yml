name: Build & Test

on:
  push:
    branches: [ main, master, deveops ]
  pull_request:
    branches: [ main, master, dev-* ]

jobs:
  build-matrix:
    name: Build on ${{ matrix.os }} (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            platform: linux_amd64
            runner_arch: x64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            platform: linux_arm64
            runner_arch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            platform: darwin_amd64
            runner_arch: x64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            platform: darwin_arm64
            runner_arch: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÁöÑ Git ÂéÜÂè≤Áî®‰∫éÁâàÊú¨‰ø°ÊÅØ

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version info
        id: version
        run: |
          # Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # ‰ªé Git Tag Ëé∑ÂèñÁâàÊú¨ÔºåÁßªÈô§ v ÂâçÁºÄ
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}  # ÁßªÈô§ v ÂâçÁºÄ
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # ‰ªé Git ÊèèËø∞Ëé∑ÂèñÁâàÊú¨ÔºåÁßªÈô§ v ÂâçÁºÄÂíå Git ÊèèËø∞‰ø°ÊÅØÔºà‰∏é Makefile ÈÄªËæë‰∏ÄËá¥Ôºâ
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
            VERSION=$(echo "$VERSION" | sed 's/^v//' | sed 's/-[0-9]*-[a-z0-9]*.*//')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

          echo "=== Version Information ==="
          echo "Version: ${VERSION}"
          echo "Is Release: ${{ steps.version.outputs.is_release }}"

      - name: Build for ${{ matrix.platform }}
        run: |
          # ‰ΩøÁî® Makefile ÁºñËØëÊåáÂÆöÂπ≥Âè∞
          echo "üî® Building for ${{ matrix.platform }} using Makefile..."
          echo "  Target: ${{ matrix.goos }}/${{ matrix.goarch }}"
          echo "  Runner: ${{ matrix.os }} (${{ matrix.runner_arch }})"
          echo "  Version: ${{ steps.version.outputs.version }}"

          make ${{ matrix.platform }}

          # ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
          echo "üìã Version information:"
          make version

      - name: Verify build artifacts
        run: |
          # Use version from GitHub context
          VERSION=${{ steps.version.outputs.version }}
          PLATFORM_DIR="target/chaosblade-${VERSION}-${{ matrix.platform }}"

          echo "=== Build artifacts for ${{ matrix.platform }} ==="
          echo "Version: ${VERSION}"
          echo "Platform directory: ${PLATFORM_DIR}"

          # Check if directory exists
          if [ ! -d "$PLATFORM_DIR" ]; then
            echo "‚ùå Platform directory not found: $PLATFORM_DIR"
            echo "Available directories in target/:"
            ls -la target/ || echo "target/ directory does not exist"
            exit 1
          fi

          echo "Directory structure:"
          find "$PLATFORM_DIR" -type f | sort
          echo ""
          echo "Binary file size:"
          ls -lh "$PLATFORM_DIR/bin/chaos_os"
          echo ""
          echo "YAML file size:"
          ls -lh "$PLATFORM_DIR/yaml/chaosblade-os-spec-${VERSION}.yaml"

          # Verify binary file
          if [ -f "$PLATFORM_DIR/bin/chaos_os" ]; then
            echo "‚úÖ Binary file exists and is executable"
            file "$PLATFORM_DIR/bin/chaos_os"

            # Verify version information (if supported)
            if command -v strings >/dev/null 2>&1; then
              echo "Version info in binary:"
              strings "$PLATFORM_DIR/bin/chaos_os" | grep -E "(chaosblade-exec-os|version|git)" | head -5
            fi
          else
            echo "‚ùå Binary file not found!"
            exit 1
          fi

      - name: Upload artifacts
        if: steps.version.outputs.is_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: chaosblade-exec-os-${{ steps.version.outputs.version }}-${{ matrix.platform }}
          path: target/chaosblade-*/${{ matrix.platform }}/
          retention-days: 30

  test:
    name: Test on Linux/amd64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run code style and import order verification
        run: make verify

      - name: Run tests
        run: make test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
